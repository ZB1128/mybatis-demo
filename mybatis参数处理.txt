单个参数：mybatis不会做特殊处理
	#{参数名/任意名}：取出参数值；
	
多个参数：mybatis会做特殊处理，多个参数会被封装成一个map，
	key：param1...paramN，value：传入的参数值，#{}就是从map中获取指定key的值；

	出现的异常：
		Caused by: 
		org.apache.ibatis.binding.BindingException: 
		Parameter 'id' not found. Available parameters are [0, 1, param1, param2]
	操作：
		方法：Employee getEmpByIdAndlastName(Integer id,String lastName);
		取值：#{id}，#{lastName}
		
	解决方式：
		1、使用#{param1...param2}，一个参数对应一个key（#{param1...paramN}）
		2、使用@Param注解：
			由于多个参数会被封装成一个map，key使用@Param注解指定的值，value参数值
			#{指定的Key}取出对应的参数值

参数值的获取：
	1、#{}：可以获取map中的值或者POJO对象属性的值；
	2、${}：可以获取map中的值获取POJO对象属性的值；
	3、区别：
		#{}：是以预编译的形式将参数设置到sql语句中；PreparedStatement，防止sql注入攻击；
		${}：取出的值直接拼装在sql语句中，会有安全问题；

#{}更丰富的用法：
	1、规定参数的一些规则：
		javaType、 jdbcType、 mode（存储过程）、 numericScale、
		resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；
	2、jdbcType通常需要在某种特定的条件下被设置
		1)、在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理，比如Oracle（报错）；
			异常：JdbcType OTHER：无效的类型，因为mybatis对所有的null都映射的是原生jdbc的OTHER类型，Oracle不支持；
			
			解决方式：
				1)、#{email，jdbcType=NULL}
				2)、全局配置文件中：
					<setting name="jdbcTypeForNull" value="NULL"/>